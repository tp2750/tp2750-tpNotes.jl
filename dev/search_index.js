var documenterSearchIndex = {"docs":
[{"location":"vectors/#Working-with-vectors-etc","page":"Working with vectors etc","title":"Working with vectors etc","text":"","category":"section"},{"location":"vectors/#Element-membership","page":"Working with vectors etc","title":"Element membership","text":"","category":"section"},{"location":"vectors/#Is-All-of-r-in-x?","page":"Working with vectors etc","title":"Is All of r in x?","text":"","category":"section"},{"location":"vectors/","page":"Working with vectors etc","title":"Working with vectors etc","text":"all() can take function as first element: Ref: https://bkamins.github.io/julialang/2022/04/01/fast.html","category":"page"},{"location":"vectors/","page":"Working with vectors etc","title":"Working with vectors etc","text":"f(x, r) = all(in(x), r) # function testing lookup speed\n\nf([1,2,3,4], [1,2,3]) ## true\n\nf([1,2,3], [1,2,3,4]) ## false","category":"page"},{"location":"vectors/","page":"Working with vectors etc","title":"Working with vectors etc","text":"Simpler:","category":"page"},{"location":"vectors/","page":"Working with vectors etc","title":"Working with vectors etc","text":"all([1,2,3] .∈  Ref([1,2,3,4])) ## true\n\nall([1,2,3,4 ] .∈  Ref([1,2,3])) ## false\n\nall(in.([1,2,3], Ref([1,2,3,4]))) ## true\n","category":"page"},{"location":"vectors/","page":"Working with vectors etc","title":"Working with vectors etc","text":"For some reason all([1,2,3] .in  Ref([1,2,3,4])) fails.","category":"page"},{"location":"vectors/","page":"Working with vectors etc","title":"Working with vectors etc","text":"From docs (currying .∈):","category":"page"},{"location":"vectors/","page":"Working with vectors etc","title":"Working with vectors etc","text":"all([1,2,3] .∈([1,2,3,4],)) ## true\nall([1,2,3,4] .∈([1,2,3,],)) ## false","category":"page"},{"location":"vectors/","page":"Working with vectors etc","title":"Working with vectors etc","text":"Using in looks a bit different:","category":"page"},{"location":"vectors/","page":"Working with vectors etc","title":"Working with vectors etc","text":"all(in([1,2,3,4]).([1,2,3])) ## true\nall(in([1,2,3]).([1,2,3,4])) ## false","category":"page"},{"location":"README/#tpNotes.jl","page":"README","title":"tpNotes.jl","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"<!–- (Image: Stable) –->  (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"README/#Purpose","page":"README","title":"Purpose","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"This repo tracks my notes on things I learn in Julia.","category":"page"},{"location":"README/#Vocabulary","page":"README","title":"Vocabulary","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Standard idioms and their R equivalent.","category":"page"},{"location":"README/","page":"README","title":"README","text":"Some R function names are implemented in src/r.jl","category":"page"},{"location":"README/#Vectors","page":"README","title":"Vectors","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Julia","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> extrema([1,2,3])\n(1, 3)\n\njulia> first(collect(1:10))\n1\n\njulia> last(collect(1:10))\n10\n","category":"page"},{"location":"README/","page":"README","title":"README","text":"R","category":"page"},{"location":"README/","page":"README","title":"README","text":"> range(c(1,2,3))\n[1] 1 3\n> head(1:10,1)\n[1] 1\n> tail(1:10,1)\n[1] 10","category":"page"},{"location":"README/#Combinations","page":"README","title":"Combinations","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Julia","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> using DataFrames\njulia> rename(DataFrame(Base.Iterators.product([1,2], [\"A\",\"B\",\"C\"])), [\"Num\",\"Name\"])\n6×2 DataFrame\n Row │ Num    Name   \n     │ Int64  String \n─────┼───────────────\n   1 │     1  A\n   2 │     2  A\n   3 │     1  B\n   4 │     2  B\n   5 │     1  C\n   6 │     2  C\n\njulia> vec(string.([\"x\", \"y\"], [1 2 3])) ## note: col-vector, row-vector. Ref https://github.com/JuliaAcademy/DataFrames/blob/main/2.%20First%20steps%20with%20data%20frames.ipynb\n6-element Array{String,1}:\n \"x1\"\n \"y1\"\n \"x2\"\n \"y2\"\n \"x3\"\n \"y3\"\n","category":"page"},{"location":"README/","page":"README","title":"README","text":"R","category":"page"},{"location":"README/","page":"README","title":"README","text":"setNames(expand.grid(c(1,2), c(\"A\",\"B\",\"C\")), c(\"Num\",\"Name\"))\n  Num Name\n1   1    A\n2   2    A\n3   1    B\n4   2    B\n5   1    C\n6   2    C\n","category":"page"},{"location":"README/#paste","page":"README","title":"paste","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"The R function paste does 2 things: 1. paste the elements of two string vectors together element by element; 2: collapse a string vector into a single string.","category":"page"},{"location":"README/#Combining","page":"README","title":"Combining","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"R:","category":"page"},{"location":"README/","page":"README","title":"README","text":"paste(c(\"a\", \"b\"), c(1,2))\n[1] \"a 1\" \"b 2\"\npaste(c(\"a\", \"b\"), c(1,2), sep=\"\")\n[1] \"a1\" \"b2\"","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> string.([\"a\", \"b\"], \" \", [1,2])\n2-element Vector{String}:\n \"a 1\"\n \"b 2\"\n\njulia> string.([\"a\", \"b\"], [1,2])\n2-element Vector{String}:\n \"a1\"\n \"b2\"","category":"page"},{"location":"README/#Collapse","page":"README","title":"Collapse","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"R","category":"page"},{"location":"README/","page":"README","title":"README","text":"> paste(c(\"a\", \"b\", \"c\"), collapse=\"\")\n[1] \"abc\"\n> paste(c(\"a\", \"b\", \"c\"), collapse=\", \")\n[1] \"a, b, c\"","category":"page"},{"location":"README/","page":"README","title":"README","text":"Julia:","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> join([\"a\", \"b\", \"c\"])\n\"abc\"\n\njulia> join([\"a\", \"b\", \"c\"], \", \")\n\"a, b, c\"\njulia> join([\"a\", \"b\", \"c\"], \", \", \" and \")\n\"a, b and c\"","category":"page"},{"location":"README/#Loop-over-rows-of-data-frame","page":"README","title":"Loop over rows of data frame","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Julia","category":"page"},{"location":"README/","page":"README","title":"README","text":"using DataFrames, DataFramesMeta\n\ndf_in = rename(DataFrame(Base.Iterators.product([1,2], [\"A\",\"B\",\"C\"])), [\"Num\",\"Name\"]);\n\n@eachrow df_in begin \n  @newcol Res1::Vector{String}\n  @newcol Res2::Vector{String}\n  :Res1 = string(:Num) * :Name\n  :Res2 = :Name * string(:Num)\nend\n\n6×4 DataFrame\n Row │ Num    Name    Res1    Res2   \n     │ Int64  String  String  String \n─────┼───────────────────────────────\n   1 │     1  A       1A      A1\n   2 │     2  A       2A      A2\n   3 │     1  B       1B      B1\n   4 │     2  B       2B      B2\n   5 │     1  C       1C      C1\n   6 │     2  C       2C      C2\n\n## Simpler for this case:\n@transform(df_in, Res1 = string.(:Num) .* :Name, Res2 = :Name .* string.(:Num))\n","category":"page"},{"location":"README/","page":"README","title":"README","text":"The last form is much simpler, but only works if the function can be broardcasted (afaIk).","category":"page"},{"location":"README/#Lists-and-dicts","page":"README","title":"Lists and dicts","text":"","category":"section"},{"location":"README/#check-if-key-is-in-dict","page":"README","title":"check if key is in dict","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"julia> haskey(args,\"fit_file\")\ntrue","category":"page"},{"location":"README/","page":"README","title":"README","text":"> \"fit_file\" %in% names(args)","category":"page"},{"location":"README/#Collect-instances-into-a-dict","page":"README","title":"Collect instances into a dict","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"See https://discourse.julialang.org/t/collect-values-in-a-dict/64626","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> l = [x => x%3 for x in 1:10];\njulia> d = Dict{Int, Vector{Int}}()\njulia> for (x,y) in l\njulia>   push!(get!(Vector{Int},d,y), x) \njulia> end\njulia> d\n\nDict{Int64, Vector{Int64}} with 3 entries:\n  0 => [3, 6, 9]\n  2 => [2, 5, 8]\n  1 => [1, 4, 7, 10]","category":"page"},{"location":"README/","page":"README","title":"README","text":"Similar in R (not explicit pairs):","category":"page"},{"location":"README/","page":"README","title":"README","text":"> l <- (1:10)%%3\n> setNames(lapply(unique(l), function(x) which(l == x)), unique(l))\n`1`\n[1]  1  4  7 10\n\n$`2`\n[1] 2 5 8\n\n$`0`\n[1] 3 6 9","category":"page"},{"location":"README/#Development","page":"README","title":"Development","text":"","category":"section"},{"location":"README/#PkgTemplates","page":"README","title":"PkgTemplates","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"This repo was setup using this snippet:","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> using PkgTemplates\njulia> t = Template(; \n    user=\"tp2750\",\n    dir=\".\",\n    authors=\"Thomas Poulsen\",\n    julia=v\"1.6\",\n    plugins=[\n        License(; name=\"GPL-2.0+\"),\n        Git(; manifest=false, ssh=true),\n        GitHubActions(;extra_versions=[\"nightly\"], x86=false, windows=false, osx=false), ## skip some defaults\n        Codecov(),\n        Documenter{GitHubActions}(),\n        Develop(),\n    ],\n  )\njulia> t(\"tpNotes\")","category":"page"},{"location":"README/","page":"README","title":"README","text":"Created the repo \"tpNotes.jl\" in GitHub and just did:","category":"page"},{"location":"README/","page":"README","title":"README","text":"tpNotes$ git push --set-upstream origin master","category":"page"},{"location":"README/","page":"README","title":"README","text":"Note that the project name in PkgTemplates doe not include \".jl\", but the repo-name does.","category":"page"},{"location":"README/","page":"README","title":"README","text":"After a bit the \"CI\" and \"codecov\" badges turn green. But the \"docs\" badges do not work out of the box.","category":"page"},{"location":"README/#Using-ssh","page":"README","title":"Using ssh","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Changing to use ssh. First check current with git remote -v. Then change it with git remote set-url origin ...:","category":"page"},{"location":"README/","page":"README","title":"README","text":"tpNotes$ git remote -v \norigin\thttps://github.com/tp2750/tpNotes.jl (fetch)\norigin\thttps://github.com/tp2750/tpNotes.jl (push)\n\ntpNotes$ git remote set-url origin  git@github.com:tp2750/tpNotes.jl.git","category":"page"},{"location":"README/","page":"README","title":"README","text":"Remember the .git at the end.","category":"page"},{"location":"README/#Adding-keys","page":"README","title":"Adding keys","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"For documentation to automatically build, generate keys by running DocumenterTools.genkeys and follow the instructions:","category":"page"},{"location":"README/","page":"README","title":"README","text":"(tpNotes) pkg> add DocumenterTools\njulia> using tpNotes\njulia> using DocumenterTools\njulia> DocumenterTools.genkeys(user = \"tp2750\", repo=\"tpNotes.jl\")","category":"page"},{"location":"README/","page":"README","title":"README","text":"Name the public key \"DOCUMENTERPUB\" and the private key \"DOCUMENTERKEY\"","category":"page"},{"location":"README/#Overloading-Base-operator","page":"README","title":"Overloading Base operator","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Overloading a base binary operator (like +):","category":"page"},{"location":"README/","page":"README","title":"README","text":"Define my own struct.\nDefine a method of a base function using that struct. Use symbol notation for the operator.","category":"page"},{"location":"README/","page":"README","title":"README","text":"No import or export needed.","category":"page"},{"location":"README/#Example","page":"README","title":"Example","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"struct People\n    name::String\nend\n\nBase.:+(p1::People, p2::People) = \"$(string(p1.name)) and $(string(p2.name))\"","category":"page"},{"location":"README/","page":"README","title":"README","text":"Then we have","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> using tpNotes\njulia> p1 = tpNotes.People(\"Søren\")\njulia> p2 = tpNotes.People(\"Mette\")\njulia> p1 + p2 == \"Søren and Mette\"\ntrue","category":"page"},{"location":"README/#Documentation-using-Documenter.jl","page":"README","title":"Documentation using Documenter.jl","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Modules needed in documentation needs to be loaded in the make.jl file. This is also the place to control the sidebar (in the pages = [] argument to makedocs). It is good practice to split documentation in several files. See https://juliadocs.github.io/Documenter.jl/stable/man/guide/#Pages-in-the-Sidebar","category":"page"},{"location":"README/#Examples","page":"README","title":"Examples","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Code examples in documentation files can share context if they are named.  The documentation does not mention it, but it looks like named blocks have to be continuous (two blocks can not mix).","category":"page"},{"location":"README/","page":"README","title":"README","text":"Eg:","category":"page"},{"location":"README/","page":"README","title":"README","text":"<pre>","category":"page"},{"location":"README/","page":"README","title":"README","text":"  a = 3","category":"page"},{"location":"README/","page":"README","title":"README","text":"  print(a)","category":"page"},{"location":"README/","page":"README","title":"README","text":"</pre>","category":"page"},{"location":"README/#Code-coverage","page":"README","title":"Code coverage","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Computing code coverage locally is done as described in the here (in the README of the Coverage.jl package).","category":"page"},{"location":"README/#PackageCompile","page":"README","title":"PackageCompile","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Remember to \"dev\" the local module from the \"app\" module. If not, you need to re-add every time you make changes to the actual module.","category":"page"},{"location":"README/#Misc","page":"README","title":"Misc","text":"","category":"section"},{"location":"README/#Which-project-is-active?","page":"README","title":"Which project is active?","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Base.active_project()","category":"page"},{"location":"README/#K-means","page":"README","title":"K-means","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"K-means","category":"page"},{"location":"README/","page":"README","title":"README","text":"https://juliastats.org/Clustering.jl/dev/kmeans.html","category":"page"},{"location":"README/","page":"README","title":"README","text":"Elements to cluster are in columns: (use x')","category":"page"},{"location":"README/","page":"README","title":"README","text":"using Clustering\njulia> x=vcat(0,repeat(1:1,10))\njulia> res = kmeans(x',2) ## or kmeans(reshape(x, 1,11),2) \njulia> res.centers\n1×2 Matrix{Float64}:\n 1.0  0.0\njulia> assignments(res)\n11-element Vector{Int64}:\n 2\n 1\n 1\n 1\n 1\n 1\n 1\n 1\n 1\n 1\n 1","category":"page"},{"location":"README/#K-medoids","page":"README","title":"K-medoids","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Selects a representing point.","category":"page"},{"location":"README/","page":"README","title":"README","text":"Needs distance matrix.","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> using Distances\njulia> x_dist = pairwise(Euclidean(), x'; dims=2)\n# or simply (https://discourse.julialang.org/t/pairwise-distances-from-a-single-column-or-vector/29415/6)\njulia> x_dist = [abs(i-j) for i in x, j in x]\n\njulia> res2 = kmedoids(x_dist, 2)\njulia> res2.medoids ## indices of medoid points\n2-element Vector{Int64}:\n 2\n 1\n# medoid points:\njulia> x[res2.medoids]\n2-element Vector{Int64}:\n 1\n 0\njulia> assignments(res2)\n11-element Vector{Int64}:\n 2\n 1\n 1\n 1\n 1\n 1\n 1\n 1\n 1\n 1\n 1\n ```\n \n# Conversions\n\n## matrix to vector and back\n","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> m = [1 3 5; 2 4 6] 2×3 Matrix{Int64}:  1  3  5  2  4  6","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> vec(m) 6-element Vector{Int64}:  1  2  3  4  5  6","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> reshape(vec(m), size(m)) == m true","category":"page"},{"location":"README/","page":"README","title":"README","text":"\n\n# Tests\n## Comparing at stated precision\nhttps://discourse.julialang.org/t/compare-numbers-at-the-stated-precision/86719/10\nIn tests I’ll like to be able to write the following and the test to pass:\n","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia @test aresame(pi, 3.14)","category":"page"},{"location":"README/","page":"README","title":"README","text":"\nThe following works:\n\n","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia @test isapprox(pi, 3.14, atol = 0.005)","category":"page"},{"location":"README/","page":"README","title":"README","text":"\nBut then I need to adjust the absolute tolerance manually.\n\nI need a function to find the “number of significant digits” of a numeric literal and use that.\n\nThe following apparently works, but I’m wondering if this already exists?\n\n","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia function sigdigs(x)     xstring = string(convert(Float64,x))     length(xstring) - findlast('.',x_string) end","category":"page"},{"location":"README/","page":"README","title":"README","text":"function aresame(x,y)     toldigits = min(sigdigs(x), sigdigs(y))     tol = .49*0.1^(toldigits)     isapprox(x,y,atol=tol) end","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> aresame(pi,3.1) true","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> aresame(pi,3.14) true","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> aresame(pi,3.141) false","category":"page"},{"location":"README/","page":"README","title":"README","text":"julia> aresame(pi,3.1415) false","category":"page"},{"location":"README/","page":"README","title":"README","text":"\n# Packages\nCool and useful packages\n\n## [TerminalPager.jl](https://github.com/ronisbr/TerminalPager.jl)\nGreat for browsing large tables:\n","category":"page"},{"location":"README/","page":"README","title":"README","text":"using TerminalPager, DataFrames pager(DataFrame(rand(100, 100), :auto)) ```","category":"page"},{"location":"README/","page":"README","title":"README","text":"Press ? to get navigation help:","category":"page"},{"location":"README/","page":"README","title":"README","text":"Shift ->, Shift <- to move side-wise\nu/d to move up/down by half a page or Page-up/down for full page\n< or g to go to top\nor G to go to end","category":"page"},{"location":"README/#[DefaultApplication.jl](https://github.com/tpapp/DefaultApplication.jl)","page":"README","title":"DefaultApplication.jl","text":"","category":"section"},{"location":"README/","page":"README","title":"README","text":"Basically just calling xdg-open, but still useful.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = tpNotes","category":"page"},{"location":"#tpNotes.jl","page":"Home","title":"tpNotes.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Purpose","page":"Home","title":"Purpose","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repo tracks my notes on things I learn in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [tpNotes]","category":"page"}]
}
